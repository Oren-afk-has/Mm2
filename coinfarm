local excluded = {
    ["gift-rift"] = true,
    ["golden-chest"] = true,
    ["royal-chest"] = true,
}

-- Create the dropdown first with empty Values (we'll fill them in)
local MultiDropdown = Tabs.Rifts:AddDropdown("MultiDropdown", {
    Title = "Rifts",
    Description = "Select What Rift You Want To Hatch",
    Values = {}, -- Empty for now
    Multi = true,
    Default = {},
})

-- Create the toggle for moving to the rift
local MoveToRiftToggle = Tabs.Rifts:AddToggle("MoveToRiftToggle", {
    Title = "Move To Selected Rift",
    Default = false,
    Callback = function(state)
        if state then
            -- Get the selected rift name from the dropdown
            local selectedRift = MultiDropdown:GetValue()
            if selectedRift and selectedRift[1] then -- Make sure there is a selected rift
                -- Get the rift's Display part in the workspace
                local rift = workspace.Rendered.Rifts:FindFirstChild(selectedRift[1])
                if rift and rift:FindFirstChild("Display") then
                    -- Get the Display's CFrame
                    local displayCFrame = rift.Display.CFrame

                    -- Tween the player to the Display's CFrame
                    local player = game.Players.LocalPlayer
                    local character = player.Character or player.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    
                    local tweenService = game:GetService("TweenService")
                    local tweenInfo = TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out) -- 2-second tween
                    local goal = {CFrame = displayCFrame} -- Tween to the Display's CFrame

                    local tween = tweenService:Create(humanoidRootPart, tweenInfo, goal)
                    tween:Play()
                end
            end
        end
    end
})

-- Collect rift names
local riftNames = {}
for _, rift in ipairs(workspace.Rendered.Rifts:GetChildren()) do
    if not excluded[rift.Name] then
        table.insert(riftNames, rift.Name)
    end
end

-- Only update the dropdown if there are valid rift names
if #riftNames > 0 then
    MultiDropdown:SetValues(riftNames)
else
    MultiDropdown:SetValues({"No rifts available"}) -- Placeholder if no rifts found
end
