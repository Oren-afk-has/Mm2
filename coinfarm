local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local activeMap
for _, child in ipairs(workspace:GetChildren()) do
	if child:IsA("Model") and child:FindFirstChild("CoinContainer") then
		activeMap = child
		break
	end
end

if not activeMap then return end

local coinContainer = activeMap:WaitForChild("CoinContainer")
local tweenTimePerStud = 0.05

local function tweenTo(position)
	local distance = (hrp.Position - position).Magnitude
	local tweenTime = math.clamp(distance * tweenTimePerStud, 0.5, 5)
	local tweenInfo = TweenInfo.new(tweenTime, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local goal = {CFrame = CFrame.new(position + Vector3.new(0, 5, 0))}
	local tween = TweenService:Create(hrp, tweenInfo, goal)
	tween:Play()
	tween.Completed:Wait()
end

local function getClosestCoin(coins, origin)
	local closestCoin, shortestDist
	for _, coin in ipairs(coins) do
		local pos
		if coin:IsA("BasePart") then
			pos = coin.Position
		elseif coin:IsA("Model") and coin.PrimaryPart then
			pos = coin.PrimaryPart.Position
		elseif coin:IsA("Model") then
			local primary = coin:FindFirstChildWhichIsA("BasePart")
			if primary then
				pos = primary.Position
			end
		end

		if pos then
			local dist = (origin - pos).Magnitude
			if not shortestDist or dist < shortestDist then
				shortestDist = dist
				closestCoin = coin
			end
		end
	end
	return closestCoin
end

task.spawn(function()
	local visited = {}
	while true do
		local allCoins = coinContainer:GetChildren()
		local unvisited = {}
		for _, coin in ipairs(allCoins) do
			if not visited[coin] then
				table.insert(unvisited, coin)
			end
		end

		if #unvisited == 0 then break end

		local closest = getClosestCoin(unvisited, hrp.Position)
		if closest then
			visited[closest] = true
			local pos
			if closest:IsA("BasePart") then
				pos = closest.Position
			elseif closest:IsA("Model") and closest.PrimaryPart then
				pos = closest.PrimaryPart.Position
			else
				local primary = closest:FindFirstChildWhichIsA("BasePart")
				if primary then
					pos = primary.Position
				end
			end

			if pos then
				tweenTo(pos)
			end
		end
	end
end)
